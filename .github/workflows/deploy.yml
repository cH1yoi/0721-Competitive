name: Auto Sync to Servers

on:
  push:
    branches: [ master ]

jobs:
  sync:
    name: Auto Sync to Servers Done
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Debug secrets
      run: |
        echo "Checking secrets availability..."
        echo "SERVER1_HOST: ${{ secrets.SERVER1_HOST != '' && 'SET' || 'NOT SET' }}"
        echo "SERVER1_USER: ${{ secrets.SERVER1_USER != '' && 'SET' || 'NOT SET' }}"
        echo "SERVER1_SSH_KEY: ${{ secrets.SERVER1_SSH_KEY != '' && 'SET' || 'NOT SET' }}"
        echo "SERVER1_PATHS: ${{ secrets.SERVER1_PATHS != '' && 'SET' || 'NOT SET' }}"
        echo "SERVER2_HOST: ${{ secrets.SERVER2_HOST != '' && 'SET' || 'NOT SET' }}"
        echo "SERVER2_USER: ${{ secrets.SERVER2_USER != '' && 'SET' || 'NOT SET' }}"
        echo "SERVER2_SSH_KEY: ${{ secrets.SERVER2_SSH_KEY != '' && 'SET' || 'NOT SET' }}"
        echo "SERVER2_PATHS: ${{ secrets.SERVER2_PATHS != '' && 'SET' || 'NOT SET' }}"

    - name: Sync to all servers
      run: |
        echo "🔍 Detecting file changes..."

        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        DELETED_FILES=$(git diff --name-only --diff-filter=D HEAD~1 HEAD)

        if [ -z "$CHANGED_FILES" ] && [ -z "$DELETED_FILES" ]; then
          echo "ℹ️ No file changes detected"
          exit 0
        fi

        echo "📁 Changed files: $CHANGED_FILES"
        echo "🗑️ Deleted files: $DELETED_FILES"

        # Filter files
        DEPLOY_FILES=""
        DELETE_FILES=""

        # Process deleted files
        for file in $DELETED_FILES; do
          SKIP_FILE=false

          if [[ "$file" == .git* ]] || [[ "$file" == .github/* ]] || [[ "$file" == *.md ]] || [[ "$file" == LICENSE ]] || [[ "$file" == "Dedicated Server Install Guide"* ]] || [[ "$file" == *.sh ]] || [[ "$file" == "cfg/server.cfg" ]] || [[ "$file" == "addons/sourcemod/configs/databases.cfg" ]] || [[ "$file" == addons/sourcemod/configs/sourcebans/* ]] || [[ "$file" == cfg/spcontrol_server/* ]]; then
            SKIP_FILE=true
          fi

          if [ "$SKIP_FILE" = false ]; then
            DELETE_FILES="$DELETE_FILES $file"
          fi
        done

        # Process changed files
        for file in $CHANGED_FILES; do
          SKIP_FILE=false

          if [[ "$file" == .git* ]] || [[ "$file" == .github/* ]] || [[ "$file" == *.md ]] || [[ "$file" == LICENSE ]] || [[ "$file" == "Dedicated Server Install Guide"* ]] || [[ "$file" == *.sh ]] || [[ "$file" == "cfg/server.cfg" ]] || [[ "$file" == "addons/sourcemod/configs/databases.cfg" ]] || [[ "$file" == addons/sourcemod/configs/sourcebans/* ]] || [[ "$file" == cfg/spcontrol_server/* ]]; then
            SKIP_FILE=true
          fi

          if [ "$SKIP_FILE" = false ] && [ -f "$file" ]; then
            DEPLOY_FILES="$DEPLOY_FILES $file"
          fi
        done

        if [ -z "$DEPLOY_FILES" ] && [ -z "$DELETE_FILES" ]; then
          echo "ℹ️ All changes are in excluded files, skipping deployment"
          exit 0
        fi

        echo "📤 Files to deploy: $DEPLOY_FILES"
        echo "🗑️ Files to delete: $DELETE_FILES"

        # Process Server 1
        if [ -n "${{ secrets.SERVER1_HOST }}" ] && [ -n "${{ secrets.SERVER1_USER }}" ] && [ -n "${{ secrets.SERVER1_SSH_KEY }}" ] && [ -n "${{ secrets.SERVER1_PATHS }}" ]; then
          echo "🚀 Processing Server 1..."

          # Setup SSH for Server 1
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER1_SSH_KEY }}" > ~/.ssh/deploy_key_1
          chmod 600 ~/.ssh/deploy_key_1
          ssh-keyscan -H ${{ secrets.SERVER1_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

          # Process each path for Server 1
          IFS=',' read -ra PATH_ARRAY <<< "${{ secrets.SERVER1_PATHS }}"
          for path in "${PATH_ARRAY[@]}"; do
            path=$(echo "$path" | xargs)
            echo "  📂 Syncing to Server 1: $path"

            # Deploy files
            for file in $DEPLOY_FILES; do
              echo "    ⬆️ Uploading: $file"
              remote_dir="$path/$(dirname $file)"
              ssh -i ~/.ssh/deploy_key_1 -o StrictHostKeyChecking=no ${{ secrets.SERVER1_USER }}@${{ secrets.SERVER1_HOST }} "mkdir -p '$remote_dir'"
              scp -i ~/.ssh/deploy_key_1 -o StrictHostKeyChecking=no "$file" "${{ secrets.SERVER1_USER }}@${{ secrets.SERVER1_HOST }}:$path/$file"
            done

            # Delete files
            for file in $DELETE_FILES; do
              echo "    🗑️ Deleting: $file"
              ssh -i ~/.ssh/deploy_key_1 -o StrictHostKeyChecking=no ${{ secrets.SERVER1_USER }}@${{ secrets.SERVER1_HOST }} "rm -f '$path/$file'" || true
            done
          done

          rm -f ~/.ssh/deploy_key_1
          echo "  ✅ Server 1 completed successfully"
        else
          echo "⚠️ Server 1 configuration incomplete, skipping"
        fi

        # Process Server 2
        if [ -n "${{ secrets.SERVER2_HOST }}" ] && [ -n "${{ secrets.SERVER2_USER }}" ] && [ -n "${{ secrets.SERVER2_SSH_KEY }}" ] && [ -n "${{ secrets.SERVER2_PATHS }}" ]; then
          echo "🚀 Processing Server 2..."

          # Setup SSH for Server 2
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER2_SSH_KEY }}" > ~/.ssh/deploy_key_2
          chmod 600 ~/.ssh/deploy_key_2
          ssh-keyscan -H ${{ secrets.SERVER2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

          # Process each path for Server 2
          IFS=',' read -ra PATH_ARRAY <<< "${{ secrets.SERVER2_PATHS }}"
          for path in "${PATH_ARRAY[@]}"; do
            path=$(echo "$path" | xargs)
            echo "  📂 Syncing to Server 2: $path"

            # Deploy files
            for file in $DEPLOY_FILES; do
              echo "    ⬆️ Uploading: $file"
              remote_dir="$path/$(dirname $file)"
              ssh -i ~/.ssh/deploy_key_2 -o StrictHostKeyChecking=no ${{ secrets.SERVER2_USER }}@${{ secrets.SERVER2_HOST }} "mkdir -p '$remote_dir'"
              scp -i ~/.ssh/deploy_key_2 -o StrictHostKeyChecking=no "$file" "${{ secrets.SERVER2_USER }}@${{ secrets.SERVER2_HOST }}:$path/$file"
            done

            # Delete files
            for file in $DELETE_FILES; do
              echo "    🗑️ Deleting: $file"
              ssh -i ~/.ssh/deploy_key_2 -o StrictHostKeyChecking=no ${{ secrets.SERVER2_USER }}@${{ secrets.SERVER2_HOST }} "rm -f '$path/$file'" || true
            done
          done

          rm -f ~/.ssh/deploy_key_2
          echo "  ✅ Server 2 completed successfully"
        else
          echo "⚠️ Server 2 configuration incomplete, skipping"
        fi

        echo "🎉 Sync process completed!"
name: Auto Sync to Servers

on:
  push:
    branches: [ master ]

jobs:
  sync:
    name: Auto Sync to Servers Done
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Sync to all servers
      run: |
        echo "üîç Detecting file changes..."

        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        DELETED_FILES=$(git diff --name-only --diff-filter=D HEAD~1 HEAD)

        if [ -z "$CHANGED_FILES" ] && [ -z "$DELETED_FILES" ]; then
          echo "‚ÑπÔ∏è No file changes detected"
          exit 0
        fi

        echo "üìÅ Changed files: $CHANGED_FILES"
        echo "üóëÔ∏è Deleted files: $DELETED_FILES"

        # Filter files
        DEPLOY_FILES=""
        DELETE_FILES=""

        # Process deleted files
        for file in $DELETED_FILES; do
          SKIP_FILE=false

          if [[ "$file" == .git* ]] || [[ "$file" == .github/* ]] || [[ "$file" == *.md ]] || [[ "$file" == LICENSE ]] || [[ "$file" == "Dedicated Server Install Guide"* ]] || [[ "$file" == *.sh ]] || [[ "$file" == "cfg/server.cfg" ]] || [[ "$file" == "addons/sourcemod/configs/databases.cfg" ]] || [[ "$file" == addons/sourcemod/configs/sourcebans/* ]] || [[ "$file" == cfg/spcontrol_server/* ]]; then
            SKIP_FILE=true
          fi

          if [ "$SKIP_FILE" = false ]; then
            DELETE_FILES="$DELETE_FILES $file"
          fi
        done

        # Process changed files
        for file in $CHANGED_FILES; do
          SKIP_FILE=false

          if [[ "$file" == .git* ]] || [[ "$file" == .github/* ]] || [[ "$file" == *.md ]] || [[ "$file" == LICENSE ]] || [[ "$file" == "Dedicated Server Install Guide"* ]] || [[ "$file" == *.sh ]] || [[ "$file" == "cfg/server.cfg" ]] || [[ "$file" == "addons/sourcemod/configs/databases.cfg" ]] || [[ "$file" == addons/sourcemod/configs/sourcebans/* ]] || [[ "$file" == cfg/spcontrol_server/* ]]; then
            SKIP_FILE=true
          fi

          if [ "$SKIP_FILE" = false ] && [ -f "$file" ]; then
            DEPLOY_FILES="$DEPLOY_FILES $file"
          fi
        done

        if [ -z "$DEPLOY_FILES" ] && [ -z "$DELETE_FILES" ]; then
          echo "‚ÑπÔ∏è All changes are in excluded files, skipping deployment"
          exit 0
        fi

        echo "üì§ Files to deploy: $DEPLOY_FILES"
        echo "üóëÔ∏è Files to delete: $DELETE_FILES"

        # Process servers
        SERVERS=(
          "1:${{ secrets.SERVER_1_HOST }}:${{ secrets.SERVER_1_USER }}:${{ secrets.SERVER_1_KEY }}:${{ secrets.SERVER_1_PATHS }}"
          "2:${{ secrets.SERVER_2_HOST }}:${{ secrets.SERVER_2_USER }}:${{ secrets.SERVER_2_KEY }}:${{ secrets.SERVER_2_PATHS }}"
        )

        SUCCESS_COUNT=0
        TOTAL_COUNT=0

        for server_config in "${SERVERS[@]}"; do
          IFS=':' read -r SERVER_NUM HOST USER KEY PATHS <<< "$server_config"

          if [ -z "$HOST" ] || [ -z "$USER" ] || [ -z "$KEY" ] || [ -z "$PATHS" ]; then
            echo "‚ö†Ô∏è Server $SERVER_NUM configuration incomplete, skipping"
            continue
          fi

          TOTAL_COUNT=$((TOTAL_COUNT + 1))
          echo "üöÄ Processing Server $SERVER_NUM ($HOST)..."

          # Setup SSH
          mkdir -p ~/.ssh
          echo "$KEY" > ~/.ssh/deploy_key_$SERVER_NUM
          chmod 600 ~/.ssh/deploy_key_$SERVER_NUM
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts 2>/dev/null

          # Process each path
          IFS=',' read -ra PATH_ARRAY <<< "$PATHS"
          SERVER_SUCCESS=true

          for path in "${PATH_ARRAY[@]}"; do
            path=$(echo "$path" | xargs)
            echo "  üìÇ Syncing to: $path"

            # Deploy files
            for file in $DEPLOY_FILES; do
              echo "    ‚¨ÜÔ∏è Uploading: $file"
              remote_dir="$path/$(dirname $file)"
              ssh -i ~/.ssh/deploy_key_$SERVER_NUM -o StrictHostKeyChecking=no $USER@$HOST "mkdir -p '$remote_dir'" || SERVER_SUCCESS=false
              scp -i ~/.ssh/deploy_key_$SERVER_NUM -o StrictHostKeyChecking=no "$file" "$USER@$HOST:$path/$file" || SERVER_SUCCESS=false
            done

            # Delete files
            for file in $DELETE_FILES; do
              echo "    üóëÔ∏è Deleting: $file"
              ssh -i ~/.ssh/deploy_key_$SERVER_NUM -o StrictHostKeyChecking=no $USER@$HOST "rm -f '$path/$file'" || true
              remote_dir="$path/$(dirname $file)"
              ssh -i ~/.ssh/deploy_key_$SERVER_NUM -o StrictHostKeyChecking=no $USER@$HOST "rmdir '$remote_dir' 2>/dev/null || true" || true
            done
          done

          if [ "$SERVER_SUCCESS" = true ]; then
            echo "  ‚úÖ Server $SERVER_NUM completed successfully"
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          else
            echo "  ‚ùå Server $SERVER_NUM failed"
          fi

          rm -f ~/.ssh/deploy_key_$SERVER_NUM
        done

        echo ""
        echo "üìä Final Result:"
        if [ $SUCCESS_COUNT -eq $TOTAL_COUNT ] && [ $TOTAL_COUNT -gt 0 ]; then
          echo "üéâ All $TOTAL_COUNT servers synced successfully!"
        elif [ $SUCCESS_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è Partial success: $SUCCESS_COUNT/$TOTAL_COUNT servers synced"
          exit 1
        else
          echo "‚ùå All server syncs failed"
          exit 1
        fi
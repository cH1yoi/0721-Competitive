name: Auto Sync to Servers

on:
  push:
    branches: [ master ]

jobs:
  sync:
    name: Sync Server ${{ matrix.server }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        server: [1, 2]
      fail-fast: false

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Load server configuration
      id: config
      run: |
        case ${{ matrix.server }} in
          1) HOST="${{ secrets.SERVER1_HOST }}"; USER="${{ secrets.SERVER1_USER }}"; KEY="${{ secrets.SERVER1_SSH_KEY }}"; PATHS="${{ secrets.SERVER1_PATHS }}" ;;
          2) HOST="${{ secrets.SERVER2_HOST }}"; USER="${{ secrets.SERVER2_USER }}"; KEY="${{ secrets.SERVER2_SSH_KEY }}"; PATHS="${{ secrets.SERVER2_PATHS }}" ;;
        esac

        if [ -z "$HOST" ] || [ -z "$USER" ] || [ -z "$KEY" ] || [ -z "$PATHS" ]; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "Server ${{ matrix.server }} configuration incomplete, skipping deployment"
          exit 0
        fi

        echo "skip=false" >> $GITHUB_OUTPUT
        echo "host=$HOST" >> $GITHUB_OUTPUT
        echo "user=$USER" >> $GITHUB_OUTPUT
        echo "paths=$PATHS" >> $GITHUB_OUTPUT

        mkdir -p ~/.ssh
        echo "$KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

        echo "Server ${{ matrix.server }} configuration loaded successfully"

    - name: Detect file changes
      if: steps.config.outputs.skip == 'false'
      id: changes
      run: |
        # Get all changed files (added, modified, deleted)
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        DELETED_FILES=$(git diff --name-only --diff-filter=D HEAD~1 HEAD)
        echo "Changed files: $CHANGED_FILES"
        echo "Deleted files: $DELETED_FILES"

        DEPLOY_FILES=""
        DELETE_FILES=""

        # Process deleted files
        for file in $DELETED_FILES; do
          SKIP_FILE=false

          # Apply same filtering rules
          if [[ "$file" == .git* ]]; then
            SKIP_FILE=true
          elif [[ "$file" == .github/* ]]; then
            SKIP_FILE=true
          elif [[ "$file" == *.md ]] || [[ "$file" == LICENSE ]] || [[ "$file" == "Dedicated Server Install Guide"* ]]; then
            SKIP_FILE=true
          elif [[ "$file" == *.sh ]]; then
            SKIP_FILE=true
          elif [[ "$file" == "cfg/server.cfg" ]]; then
            SKIP_FILE=true
          elif [[ "$file" == "addons/sourcemod/configs/databases.cfg" ]]; then
            SKIP_FILE=true
          elif [[ "$file" == addons/sourcemod/configs/sourcebans/* ]]; then
            SKIP_FILE=true
          elif [[ "$file" == cfg/spcontrol_server/* ]]; then
            SKIP_FILE=true
          fi

          if [ "$SKIP_FILE" = false ]; then
            DELETE_FILES="$DELETE_FILES $file"
            echo "Marked for deletion: $file"
          else
            echo "Skipping deletion: $file"
          fi
        done

        # Process added and modified files
        for file in $CHANGED_FILES; do
          SKIP_FILE=false

          # Skip Git related files
          if [[ "$file" == .git* ]]; then
            echo "Skipping Git file: $file"
            SKIP_FILE=true
          fi

          # Skip GitHub Actions directory
          if [[ "$file" == .github/* ]]; then
            echo "Skipping GitHub Actions file: $file"
            SKIP_FILE=true
          fi

          # Skip documentation files
          if [[ "$file" == *.md ]] || [[ "$file" == LICENSE ]] || [[ "$file" == "Dedicated Server Install Guide"* ]]; then
            echo "Skipping documentation file: $file"
            SKIP_FILE=true
          fi

          # Skip script files
          if [[ "$file" == *.sh ]]; then
            echo "Skipping script file: $file"
            SKIP_FILE=true
          fi

          # Skip protected server configuration
          if [[ "$file" == "cfg/server.cfg" ]]; then
            echo "Skipping protected server config: $file"
            SKIP_FILE=true
          fi

          # Skip database configuration
          if [[ "$file" == "addons/sourcemod/configs/databases.cfg" ]]; then
            echo "Skipping database config: $file"
            SKIP_FILE=true
          fi

          # Skip sourcebans configuration directory
          if [[ "$file" == addons/sourcemod/configs/sourcebans/* ]]; then
            echo "Skipping SourceBans config: $file"
            SKIP_FILE=true
          fi

          # Skip spcontrol_server configuration directory
          if [[ "$file" == cfg/spcontrol_server/* ]]; then
            echo "Skipping SPControl server config: $file"
            SKIP_FILE=true
          fi

          # Add to deploy list if file should not be skipped and exists
          if [ "$SKIP_FILE" = false ] && [ -f "$file" ]; then
            DEPLOY_FILES="$DEPLOY_FILES $file"
            echo "Marked for deployment: $file"
          fi
        done

        if [ -z "$DEPLOY_FILES" ] && [ -z "$DELETE_FILES" ]; then
          echo "has_files=false" >> $GITHUB_OUTPUT
          echo "No files to deploy or delete"
        else
          echo "has_files=true" >> $GITHUB_OUTPUT
          echo "files=$DEPLOY_FILES" >> $GITHUB_OUTPUT
          echo "delete_files=$DELETE_FILES" >> $GITHUB_OUTPUT
          echo "Final deployment list: $DEPLOY_FILES"
          echo "Final deletion list: $DELETE_FILES"
        fi

    - name: Sync files to server
      if: steps.config.outputs.skip == 'false' && steps.changes.outputs.has_files == 'true'
      run: |
        HOST=${{ steps.config.outputs.host }}
        USER=${{ steps.config.outputs.user }}
        PATHS="${{ steps.config.outputs.paths }}"
        FILES="${{ steps.changes.outputs.files }}"
        DELETE_FILES="${{ steps.changes.outputs.delete_files }}"

        echo "Syncing to $HOST"
        echo "Target paths: $PATHS"
        echo "Files to deploy: $FILES"
        echo "Files to delete: $DELETE_FILES"

        # Process each deployment path
        for path in $(echo $PATHS | tr ',' ' '); do
          echo "Processing path: $path"

          # Delete files
          if [ -n "$DELETE_FILES" ]; then
            for file in $DELETE_FILES; do
              echo "Deleting file: $file"
              ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $USER@$HOST "rm -f '$path/$file'"

              # Remove empty directories
              remote_dir="$path/$(dirname $file)"
              ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $USER@$HOST "rmdir '$remote_dir' 2>/dev/null || true"
            done
          fi

          # Deploy files
          if [ -n "$FILES" ]; then
            for file in $FILES; do
              echo "Deploying file: $file"

              # Ensure remote directory exists
              remote_dir="$path/$(dirname $file)"
              ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $USER@$HOST "mkdir -p '$remote_dir'"

              # Copy file
              scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no "$file" "$USER@$HOST:$path/$file"

              # Set executable permissions for shell scripts
              if [[ "$file" == *.sh ]]; then
                ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $USER@$HOST "chmod +x '$path/$file'"
              fi
            done
          fi
        done

        echo "Sync completed successfully"

        echo "Deploy completed!"

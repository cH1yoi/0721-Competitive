name: Auto Sync to Servers

on:
  push:
    branches: [ master ]
    paths:
      - 'addons/**'
      - 'cfg/**'
      - 'scripts/**'
      - 'sound/**'
      - 'whitelist.cfg'

jobs:
  sync:
    name: Auto Sync to Servers Done
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Sync to all servers
      run: |
        echo "üîç Detecting file changes..."

        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        DELETED_FILES=$(git diff --name-only --diff-filter=D HEAD~1 HEAD)

        if [ -z "$CHANGED_FILES" ] && [ -z "$DELETED_FILES" ]; then
          echo "‚ÑπÔ∏è No file changes detected"
          exit 0
        fi

        echo "üìÅ Changed files: $CHANGED_FILES"
        echo "üóëÔ∏è Deleted files: $DELETED_FILES"

        # Filter files
        DEPLOY_FILES=""
        DELETE_FILES=""

        # Process deleted files
        for file in $DELETED_FILES; do
          SKIP_FILE=false

          if [[ "$file" == .git* ]] || [[ "$file" == .github/* ]] || [[ "$file" == *.md ]] || [[ "$file" == LICENSE ]] || [[ "$file" == "Dedicated Server Install Guide"* ]] || [[ "$file" == *.sh ]] || [[ "$file" == "cfg/server.cfg" ]] || [[ "$file" == "addons/sourcemod/configs/databases.cfg" ]] || [[ "$file" == addons/sourcemod/configs/sourcebans/* ]] || [[ "$file" == cfg/spcontrol_server/* ]]; then
            SKIP_FILE=true
          fi

          if [ "$SKIP_FILE" = false ]; then
            DELETE_FILES="$DELETE_FILES $file"
          fi
        done

        # Process changed files
        for file in $CHANGED_FILES; do
          SKIP_FILE=false

          if [[ "$file" == .git* ]] || [[ "$file" == .github/* ]] || [[ "$file" == *.md ]] || [[ "$file" == LICENSE ]] || [[ "$file" == "Dedicated Server Install Guide"* ]] || [[ "$file" == *.sh ]] || [[ "$file" == "cfg/server.cfg" ]] || [[ "$file" == "addons/sourcemod/configs/databases.cfg" ]] || [[ "$file" == addons/sourcemod/configs/sourcebans/* ]] || [[ "$file" == cfg/spcontrol_server/* ]]; then
            SKIP_FILE=true
          fi

          if [ "$SKIP_FILE" = false ] && [ -f "$file" ]; then
            DEPLOY_FILES="$DEPLOY_FILES $file"
          fi
        done

        if [ -z "$DEPLOY_FILES" ] && [ -z "$DELETE_FILES" ]; then
          echo "‚ÑπÔ∏è All changes are in excluded files, skipping deployment"
          exit 0
        fi

        echo "üì§ Files to deploy: $DEPLOY_FILES"
        echo "üóëÔ∏è Files to delete: $DELETE_FILES"

        # Check if SERVERS_CONFIG is available
        if [ -z "${{ secrets.SERVERS_CONFIG }}" ]; then
          echo "‚ö†Ô∏è SERVERS_CONFIG secret not found, skipping deployment"
          exit 0
        fi

        # Parse servers configuration
        echo '${{ secrets.SERVERS_CONFIG }}' > servers_config.json

        # Get server count
        SERVER_COUNT=$(cat servers_config.json | jq '. | length')
        echo "üñ•Ô∏è Found $SERVER_COUNT server(s) to sync"

        # Process each server
        for i in $(seq 0 $((SERVER_COUNT-1))); do
          SERVER_NAME=$(cat servers_config.json | jq -r ".[$i].name")
          SERVER_HOST=$(cat servers_config.json | jq -r ".[$i].host")
          SERVER_USER=$(cat servers_config.json | jq -r ".[$i].user")
          SERVER_SSH_KEY=$(cat servers_config.json | jq -r ".[$i].ssh_key")
          SERVER_PATHS=$(cat servers_config.json | jq -r ".[$i].paths")

          echo "üöÄ Processing $SERVER_NAME..."

          # Validate server configuration
          if [ "$SERVER_HOST" = "null" ] || [ "$SERVER_USER" = "null" ] || [ "$SERVER_SSH_KEY" = "null" ] || [ "$SERVER_PATHS" = "null" ]; then
            echo "‚ö†Ô∏è $SERVER_NAME configuration incomplete, skipping"
            continue
          fi

          # Setup SSH
          SSH_KEY_FILE="~/.ssh/deploy_key_$i"
          mkdir -p ~/.ssh
          echo "$SERVER_SSH_KEY" > "$SSH_KEY_FILE"
          chmod 600 "$SSH_KEY_FILE"
          ssh-keyscan -H "$SERVER_HOST" >> ~/.ssh/known_hosts 2>/dev/null

          # Process each path for current server
          echo "$SERVER_PATHS" | jq -r '.[]' | while read -r path; do
            echo "  üìÇ Syncing to $SERVER_NAME: $path"

            # Deploy files
            for file in $DEPLOY_FILES; do
              echo "    ‚¨ÜÔ∏è Uploading: $file"
              remote_dir="$path/$(dirname $file)"
              ssh -i "$SSH_KEY_FILE" -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_HOST" "mkdir -p '$remote_dir'"
              scp -i "$SSH_KEY_FILE" -o StrictHostKeyChecking=no "$file" "$SERVER_USER@$SERVER_HOST:$path/$file"
            done

            # Delete files
            for file in $DELETE_FILES; do
              echo "    üóëÔ∏è Deleting: $file"
              ssh -i "$SSH_KEY_FILE" -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_HOST" "rm -f '$path/$file'" || true
            done
          done

          # Cleanup SSH key
          rm -f "$SSH_KEY_FILE"
          echo "  ‚úÖ $SERVER_NAME completed successfully"
        done

        # Cleanup
        rm -f servers_config.json
        echo "üéâ Sync process completed!"